import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
	id 'com.matthewprenger.cursegradle' version "1.4.0"
	id 'maven-publish'
}

group = projectGroup
archivesBaseName = projectArchiveBaseName
version = projectBaseVersion

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = 'velocity'
		url = 'https://nexus.velocitypowered.com/repository/maven-public/'
	}
	maven {
		name = 'modmenu'
		url = 'https://maven.terraformersmc.com/releases/'
	}
	maven { url "https://maven.shedaniel.me/" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	implementation "com.google.zxing:javase:${project.zxing_version}"
	shadow "com.google.zxing:javase:${project.zxing_version}"
	shadow "com.google.zxing:core:${project.zxing_version}"
	
	modImplementation shadow("com.velocitypowered:velocity-brigadier:${project.velocity_version}")
	
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude module: "modmenu"
    }
    
	modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group : "net.fabricmc.fabric-api")
	}
}

minecraft {
	refmapName = "${project.group}.${project.archivesBaseName}"
}

compileJava {
    options.compilerArgs << '-Xlint:deprecation'
}

// Contains curse token, maven user and password.
if (rootProject.file('private.gradle').exists()) {
	apply from: 'private.gradle'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

String parseChangelog(String path) {
	def file = new File(path)

	if (!file.exists())
		return '(no changelog)'
	def changelog = ""
  def end = false

	file.eachLine {
		if (end || it == null)
			return
		if (!it.startsWith('==='))
			changelog += "$it\n"
    else
      end = true
	}
	return changelog
}

String getReleaseType() {
  if (projectBaseVersion.contains('alpha'))
    return 'alpha'
  else if (projectBaseVersion.contains('beta'))
    return 'beta'
  return 'release'
}

def curseReleaseType = getReleaseType()
def ENV = System.getenv()

tasks.curseforge.enabled = !projectBaseVersion.contains('SNAPSHOT') && project.hasProperty('curse_api_key') && project.hasProperty('curseProjectId') && project.hasProperty('curseGameVersion')

curseforge {
	
  	if(project.hasProperty('curse_api_key')) apiKey = curse_api_key

  	project {
  		id = curseProjectId
  		changelog = parseChangelog('changelog.txt')
  		releaseType = curseReleaseType
  		addGameVersion curseGameVersion
  		addGameVersion 'Fabric'
  		addGameVersion 'Java 16'
  		mainArtifact(remapJar) {
  			displayName = "[$mcVersionFull] $projectName-${project.version}"
  		}
  		relations {
    		requiredDependency 'fabric-api'
			embeddedLibrary 'auto-config-updated-api'
			embeddedLibrary 'cloth-config'
			optionalDependency 'modmenu'
  		}
	}
	
	options {
		forgeGradleIntegration = false
	}
}

afterEvaluate {
	// Manually set dependsOn because curseforge doesn't set one.
	tasks."curseforge$curseProjectId".dependsOn remapJar
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}


tasks.jar.enabled = false
tasks.remapJar.enabled = false

shadowJar {
 	destinationDirectory = file("${buildDir}/tmp/allJar")
    configurations = [project.configurations.shadow]
    relocate 'com.google.zxing', 'de.rangun.pandacrossing.shadowed.com.google.zxing'
    relocate 'com.mojang.brigadier', 'de.rangun.pandacrossing.shadowed.com.mojang.brigadier'

    //Exclude META-INF entries of shaded deps
    exclude 'META-INF/**'
    exclude '**/*.pdn'
    exclude '**/*.bbmodel'
    from('.') {
        include 'LICENSE.md'
		include 'NOTICE.txt'
		include 'licenses/**'
    }
	minimize()
}

task remapShadowJar(type: RemapJarTask) {
	dependsOn shadowJar
	addNestedDependencies = true
	input = shadowJar.archivePath
}

assemble {
	dependsOn remapShadowJar
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
